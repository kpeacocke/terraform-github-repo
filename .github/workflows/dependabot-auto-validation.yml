name: Dependabot Auto-Validation

# Description: This workflow automatically validates, approves, and merges Dependabot PRs.
# It runs on Dependabot-generated pull requests to verify changes are safe to merge.
# Key actions: Terraform validation, security checking, auto-approval, auto-merge

# Minimal permissions for security hardening
permissions:
  contents: read
  pull-requests: write
  security-events: write  # Allow nested jobs to request this

on:
  pull_request_target:
    branches: [main]
    # Only run on Dependabot PRs
    types: [opened, synchronize, reopened]

jobs:
  # Check if this is a Dependabot PR
  check-dependabot:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      is-dependabot: ${{ steps.check.outputs.is-dependabot }}
    steps:
      - name: Check if Dependabot PR
        id: check
        run: echo "is-dependabot=true" >> $GITHUB_OUTPUT

  # Validate Terraform changes using reusable workflow
  terraform-validation-1-5:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    uses: ./.github/workflows/reusable-terraform-validation.yml
    permissions:
      contents: read
      security-events: write
    with:
      terraform_version: "1.5.0"
      working_directory: "."
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  terraform-validation-1-6:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    uses: ./.github/workflows/reusable-terraform-validation.yml
    permissions:
      contents: read
      security-events: write
    with:
      terraform_version: "1.6.0"
      working_directory: "."
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      
  terraform-validation-1-7:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    uses: ./.github/workflows/reusable-terraform-validation.yml
    permissions:
      contents: read
      security-events: write
    with:
      terraform_version: "1.7.0"
      working_directory: "."
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      
  terraform-validation-latest:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    uses: ./.github/workflows/reusable-terraform-validation.yml
    permissions:
      contents: read
      security-events: write
    with:
      terraform_version: "latest"
      working_directory: "."
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      
  validate-examples:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN }}
      TF_VAR_owner: ${{ github.repository_owner }}
      TF_VAR_name: ${{ github.event.repository.name }}
      TF_VAR_github_token: ${{ secrets.GIT_COMMITTERS_TOKEN }}
      TF_VAR_github_owner: ${{ github.repository_owner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GIT_COMMITTERS_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: "latest"


      - name: Validate Examples
        run: |
          for example in examples/*/; do
            if [ -d "$example" ]; then
              echo "Validating example: $example"
              cd "$example"
              terraform init -input=false
              terraform validate -no-color
              if [ -f terraform.tfvars ]; then
                terraform plan -input=false -var-file=terraform.tfvars
              else
                terraform plan -input=false
              fi
              cd - > /dev/null
            fi
          done
        

  # Run Go tests for Terratest
  go-tests:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GITHUB_OWNER: ${{ github.repository_owner }}
      TF_VAR_visibility: private
      GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install tofu
        run: |
          curl -s https://install.opentofu.org | sh
          echo "$HOME/.opentofu/bin" >> $GITHUB_PATH

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: 1.21
          cache: true

      - name: Download Go modules
        run: go mod tidy
        working-directory: ${{ github.workspace }}


      - name: Run Go tests
        run: |
          export GO111MODULE=on
          go mod tidy
          go test -v -timeout 10m ./test
        working-directory: ${{ github.workspace }}
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN }}


      - name: Run Go tests with race detection
        run: |
          export GO111MODULE=on
          go mod tidy
          go test -race -v -timeout 15m ./test
        working-directory: ${{ github.workspace }}
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN }}

  # Security scanning using reusable workflow
  security-scan:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    uses: ./.github/workflows/reusable-security-scan.yml
    permissions:
      contents: read
      security-events: write
    with:
      working_directory: "."
      target_type: "fs"
      format: "sarif"
      severity: "MEDIUM,HIGH,CRITICAL"
      upload_to_security_tab: true

  # Documentation validation
  docs-validation:
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GIT_COMMITTERS_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install MkDocs dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Validate MkDocs build
        run: |
          mkdocs build --strict

      - name: Generate terraform-docs (update README if needed)
        uses: terraform-docs/gh-actions@6de6da0cefcc6b4b7a5cbea4d79d97060733093c # v1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: false
          fail-on-diff: false

      - name: Fix permissions for git
        run: |
          sudo chown -R $(whoami) .git

      - name: Commit and push updated README if changed
        run: |
          if [[ -n "$(git status --porcelain README.md)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add README.md
            git commit -m "docs: update README.md with latest terraform-docs [skip ci]"
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "README.md is up to date."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for README.md drift (fail if still out of date)
        uses: terraform-docs/gh-actions@6de6da0cefcc6b4b7a5cbea4d79d97060733093c # v1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: false
          fail-on-diff: true

  # Auto-approve and merge if all checks pass
  auto-merge:
    needs: [terraform-validation-1-5, terraform-validation-1-6, terraform-validation-1-7, terraform-validation-latest, validate-examples, go-tests, security-scan, docs-validation]
    if: always() && 
        needs.terraform-validation-1-5.result == 'success' && 
        needs.terraform-validation-1-6.result == 'success' && 
        needs.terraform-validation-1-7.result == 'success' && 
        needs.terraform-validation-latest.result == 'success' && 
        needs.validate-examples.result == 'success' && 
        needs.go-tests.result == 'success' && 
        needs.security-scan.result == 'success' && 
        needs.docs-validation.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Auto-approve Dependabot PR
        uses: hmarr/auto-approve-action@f0939ea97e9205ef24d872e76833fa908a770363 # v4.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        run: gh pr merge --auto --squash "${{ github.event.pull_request.html_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on failure
  notify-failure:
    needs: [terraform-validation-1-5, terraform-validation-1-6, terraform-validation-1-7, terraform-validation-latest, validate-examples, go-tests, security-scan, docs-validation]
    if: always() && 
        (needs.terraform-validation-1-5.result == 'failure' || 
         needs.terraform-validation-1-6.result == 'failure' || 
         needs.terraform-validation-1-7.result == 'failure' || 
         needs.terraform-validation-latest.result == 'failure' || 
         needs.validate-examples.result == 'failure' || 
         needs.go-tests.result == 'failure' || 
         needs.security-scan.result == 'failure' || 
         needs.docs-validation.result == 'failure')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Dependabot PR Validation Failed**\n\nOne or more validation checks failed. Please review the failed checks and fix any issues before merging.\n\n- Terraform Validation 1.5.0: ${{ needs.terraform-validation-1-5.result }}\n- Terraform Validation 1.6.0: ${{ needs.terraform-validation-1-6.result }}\n- Terraform Validation 1.7.0: ${{ needs.terraform-validation-1-7.result }}\n- Terraform Validation Latest: ${{ needs.terraform-validation-latest.result }}\n- Example Validation: ${{ needs.validate-examples.result }}\n- Go Tests: ${{ needs.go-tests.result }}\n- Security Scan: ${{ needs.security-scan.result }}\n- Documentation: ${{ needs.docs-validation.result }}'
            })

name: Release & Publish

# Description: This workflow handles semantic versioning releases.
# It runs on pushes to main branch and manual triggers with release type options.
# Key actions: validation, semantic release, version tagging, release notes generation

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major

jobs:
  # Pre-release validation
  validate:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release is needed
        id: check
        run: |
          # Check if there are commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous releases found, creating first release"
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
            if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
              echo "Found $COMMITS_SINCE_TAG commits since last release"
              echo "should-release=true" >> $GITHUB_OUTPUT
            else
              echo "No commits since last release"
              echo "should-release=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Setup Terraform
        if: steps.check.outputs.should-release == 'true'
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: latest

      - name: Terraform Format Check
        if: steps.check.outputs.should-release == 'true'
        run: terraform fmt -check -recursive

      - name: Terraform Init
        if: steps.check.outputs.should-release == 'true'
        run: terraform init

      - name: Terraform Validate
        if: steps.check.outputs.should-release == 'true'
        run: terraform validate

      - name: Setup Go
        if: steps.check.outputs.should-release == 'true'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: 1.21
          cache: true

      - name: Run Tests
        if: steps.check.outputs.should-release == 'true'
        run: |
          export GO111MODULE=on
          go mod tidy
          # Run only template rendering tests that don't require external dependencies
          go test -v -timeout 10m -run "TestPrintWorkingDirectory|TestRenderDependabotTemplate|TestRenderCodeQLTemplate|TestRenderCIEnforcementTemplate" ./test
        working-directory: ${{ github.workspace }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Semantic release
  release:
    needs: validate
    if: needs.validate.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      published: ${{ steps.semantic.outputs.published }}
      release-notes: ${{ steps.semantic.outputs.release-notes }}

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v4
        with:
          node-version: 20

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: latest

      - name: Update terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          ./terraform-docs markdown table --output-file README.md --output-mode inject .

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --debug
          # Capture outputs
          echo "version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          echo "published=true" >> $GITHUB_OUTPUT

      - name: Reduce multiple blank lines in CHANGELOG.md to one
        run: |
          awk 'BEGIN{blank=0} /^$/ {blank++; if(blank<2) print; next} {blank=0; print}' CHANGELOG.md > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add CHANGELOG.md
          if git diff --cached --quiet; then
            echo "No changes to commit after cleaning CHANGELOG.md"
          else
            git commit -m "chore: reduce multiple blank lines in CHANGELOG.md to one"
            git push origin main
          fi

  # Terraform Registry publishing
  terraform-registry:
    needs: [validate, release]
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      discussions: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          ref: ${{ needs.release.outputs.version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: latest

      - name: Validate Terraform for Registry
        run: |
          terraform fmt -check -recursive
          terraform init
          terraform validate
          
          # Check required files for Terraform Registry
          echo "Checking Terraform Registry requirements..."
          
          # Check for required files
          if [ ! -f "main.tf" ] && [ ! -f "variables.tf" ]; then
            echo "‚ùå Missing main.tf or variables.tf"
            exit 1
          fi
          
          if [ ! -f "README.md" ]; then
            echo "‚ùå Missing README.md"
            exit 1
          fi
          
          if [ ! -f "LICENSE" ]; then
            echo "‚ùå Missing LICENSE file"
            exit 1
          fi
          
          # Check examples directory
          if [ ! -d "examples" ]; then
            echo "‚ùå Missing examples directory"
            exit 1
          fi
          
          echo "‚úÖ All Terraform Registry requirements met"

      - name: Publish to Terraform Registry
        run: |
          echo "üöÄ Publishing to Terraform Registry..."
          echo "Module: kpeacocke/terraform-github-repo"
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Registry will automatically detect the new release tag"
          echo "Monitor at: https://registry.terraform.io/modules/kpeacocke/terraform-github-repo"

      - name: Notify Terraform Registry
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = "${{ needs.release.outputs.version }}";
            
            // Create a release notification comment
            const body = `
            ## üöÄ Terraform Registry Release
            
            **Module**: \`kpeacocke/terraform-github-repo\`
            **Version**: \`${version}\`
            **Registry URL**: https://registry.terraform.io/modules/kpeacocke/terraform-github-repo/${version}
            
            ### Next Steps
            1. Monitor the Terraform Registry for the new version
            2. Update any dependent modules
            3. Verify the module documentation is updated
            
            ### Usage
            \`\`\`hcl
            module "github_repo" {
              source = "kpeacocke/terraform-github-repo/github"
              version = "${version}"
              
              # Your configuration here
            }
            \`\`\`
            `;
            
            // Add comment to the release
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: version
            });
            
            // Create a comment using the discussion_url which points to the release discussion
            const discussionUrl = release.data.discussion_url;
            if (discussionUrl) {
              // Extract the discussion number from the URL
              const discussionNumber = discussionUrl.split('/').pop();
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(discussionNumber),
                body
              });
            } else {
              console.log('No discussion URL found for this release. Adding comment directly to the release.');
              // If no discussion, create a new issue instead
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üì¶ Release ${version} Published to Terraform Registry`,
                body: body,
                labels: ['release', 'documentation']
              });
            }

  # Documentation update
  docs-update:
    needs: [release, terraform-registry]
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
    

    steps:
      - name: Checkout main branch (ensure mkdocs.yml is present)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Needed for git-revision-date-localized plugin


      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install OpenSSL dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev openssl ca-certificates

      - name: Install MkDocs dependencies
        run: |
          # Upgrade pip first
          python -m pip install --upgrade pip setuptools wheel
          
          # Install critical dependencies first with specific versions
          pip install --no-cache-dir pyyaml==6.0.1 mergedeep==1.3.4 markupsafe==2.1.3 jinja2==3.1.2 packaging==23.2
          
          # Install remaining dependencies
          pip install --no-cache-dir -r docs/requirements.txt
          pip install --no-cache-dir --no-deps mike==2.0.0

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Apply Python SSL fixes
        run: |
          source ./scripts/fix-python-ssl.sh

      - name: Fix Mike alias conflicts
        run: |
          echo "==== Mike Alias Conflict Resolution Tool ===="
          VERSION="${{ needs.release.outputs.version }}"
          echo "Latest version: $VERSION"
          BRANCH_OR_COMMIT=$(git branch --show-current || git rev-parse --short HEAD)
          echo "Current branch or commit: $BRANCH_OR_COMMIT"

          # Ensure we have the fix_mike_info.py script
          mkdir -p scripts
          if [ ! -f "scripts/fix_mike_info.py" ]; then
            echo "Downloading fix_mike_info.py script..."
            curl -s -o scripts/fix_mike_info.py https://raw.githubusercontent.com/kpeacocke/terraform-github-repo/main/scripts/fix_mike_info.py || \
            echo "Warning: Could not download script from repository"
          fi

          # Make sure the script is executable
          chmod +x scripts/fix_mike_info.py

          # Check if gh-pages branch exists and switch to it
          if git ls-remote --exit-code origin gh-pages >/dev/null 2>&1; then
            echo "gh-pages branch exists, checking for existing aliases..."
            # Get current branch to restore later
            ORIGINAL_BRANCH=$(git branch --show-current || echo "main")

            # Fetch and switch to gh-pages branch
            git fetch origin gh-pages
            git checkout gh-pages 2>/dev/null || {
              echo "Error: Could not switch to gh-pages branch, cleaning up conflicts..."
              git stash || true
              git checkout -b gh-pages origin/gh-pages || {
                echo "Error: Could not create gh-pages branch"
                git checkout "$ORIGINAL_BRANCH" || git checkout main
              }
            }

            # Run the script to clean .mike/info.json
            python3 ./scripts/fix_mike_info.py || {
              echo "Script execution failed, attempting direct cleanup..."
              # Manual cleanup of the most critical conflicts
              if [ -d ".mike/versions/latest" ]; then
                echo "Manually removing .mike/versions/latest directory..."
                rm -rf .mike/versions/latest
              fi

              # Look for any directories containing 'latest'
              find .mike/versions -type d -name "*[lL][aA][tT][eE][sS][tT]*" -exec rm -rf {} \; 2>/dev/null || true

              # Clean info.json with grep if it exists
              if [ -f ".mike/info.json" ]; then
                echo "Manually cleaning .mike/info.json..."
                cp .mike/info.json .mike/info.json.bak
                grep -v '"latest"' .mike/info.json.bak > .mike/info.json || cp .mike/info.json.bak .mike/info.json
              else
                # Create info.json if it doesn't exist
                mkdir -p .mike
                echo '{"aliases": {}, "versions": []}' > .mike/info.json
              fi
            }

            # Clean up changes
            if git status --porcelain | grep -q ".mike"; then
              git add .mike
              git commit -m "Fix 'latest' alias and version conflicts" || true
              git push origin gh-pages || echo "Could not push changes"
            fi

            # Return to original branch
            git checkout "$ORIGINAL_BRANCH" || git checkout main
          else
            echo "No gh-pages branch found, nothing to fix."
          fi

      - name: Ensure we're on main branch and mkdocs.yml is present
        run: |
          # Ensure we're on the main branch (not gh-pages from the previous step)
          git checkout main
          git pull origin main || true  # Pull latest changes, ignore errors if already up to date
          
          # Check for mkdocs.yml
          if [ ! -f mkdocs.yml ]; then
            echo "::error::mkdocs.yml is missing in repo root!"
            echo "Current directory: $(pwd)"
            echo "Files in current directory:"
            ls -la
            exit 1
          fi
          echo "‚úÖ mkdocs.yml found in repo root"
        working-directory: ${{ github.workspace }}

      - name: Validate MkDocs setup
        run: |
          echo "Validating MkDocs setup..."
          python3 ./scripts/validate_mkdocs.py || {
            echo "Validation failed. Check logs for details."
            exit 1
          }
        working-directory: ${{ github.workspace }}

      - name: Deploy versioned documentation
        run: |
          echo "Deploying versioned documentation..."
          python3 ./scripts/deploy_docs.py --version "${{ needs.release.outputs.version }}"
        working-directory: ${{ github.workspace }}

      - name: Update changelog in docs
        run: |
          # Ensure we're on main branch and have latest changes
          git checkout main
          git pull origin main || true  # Ensure we have latest changes
          
          # Copy changelog to docs
          cp CHANGELOG.md docs/changelog.md
          
          # Commit and push if there are changes
          git add docs/changelog.md
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: update changelog for ${{ needs.release.outputs.version }}"
            git push origin main
          fi
        working-directory: ${{ github.workspace }}

  # Notification and cleanup
  notify:
    needs: [release, terraform-registry, docs-update]
    if: always() && needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      discussions: write
    
    steps:
      - name: Checkout main branch (ensure mkdocs.yml is present)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 

      - name: Verify presence of required scripts
        run: |
          echo "Verifying presence of required scripts..."
          for script in notify_success.py notify_failure.py cleanup_releases.py; do
            if [ ! -f "./scripts/$script" ]; then
              echo "::error::Missing script: $script"
              exit 1
            fi
          done
          echo "‚úÖ All required scripts are present."
        working-directory: ${{ github.workspace }}

      - name: Notify success
        run: |
          echo "Notifying success..."
          python3 ./scripts/notify_success.py --version "${{ needs.release.outputs.version }}" || {
            echo "Notification failed. Check logs for details."
            exit 1
          }

      - name: Notify failure
        run: |
          echo "Notifying failure..."
          python3 ./scripts/notify_failure.py --version "${{ needs.release.outputs.version }}" || {
            echo "Notification failed. Check logs for details."
            exit 1
          }

  # Cleanup old releases (optional)
  cleanup:
    needs: [notify]
    if: always()
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: read
    
    steps:
      - name: Checkout main branch (ensure mkdocs.yml is present)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 

      - name: Cleanup old pre-releases
        run: |
          echo "Cleaning up old pre-releases..."
          python3 ./scripts/cleanup_releases.py --keep 10 || {
            echo "Cleanup failed. Check logs for details."
            exit 1
          }

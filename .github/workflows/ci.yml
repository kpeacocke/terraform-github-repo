name: "CI"

# Description: This workflow validates Terraform code, runs security checks, and enforces policies.
# It runs on pull requests affecting Terraform code or configuration files.
# Key actions: terraform validation, TFLint, OPA policy checks, drift detection

on:
  pull_request:
    paths:
      - '**/*.tf'
      - 'README.md'
      - 'Taskfile.yml'
      - '.terraform-docs.yml'
      - 'policy/**'
  workflow_dispatch:

# Least-privilege permissions for the entire workflow
permissions:
  contents: read          # Read repository contents
  security-events: write  # Upload SARIF security results
  pull-requests: write    # Comment on PRs and auto-commit
  actions: read          # Read workflow information

jobs:
  # Using reusable workflow for Terraform validation
  terraform-validation-1-5:
    name: "Terraform Validation (1.5.0)"
    uses: ./.github/workflows/reusable-terraform-validation.yml
    permissions:
      contents: read
      security-events: write
    with:
      terraform_version: "1.5.0"
      working_directory: "."
      backend: false
    secrets:
      token: ${{ secrets.GIT_COMMITTERS_TOKEN }}

  terraform-validation-1-6:
    name: "Terraform Validation (1.6.0)"
    uses: ./.github/workflows/reusable-terraform-validation.yml
    permissions:
      contents: read
      security-events: write
    with:
      terraform_version: "1.6.0"
      working_directory: "."
      backend: false
    secrets:
      token: ${{ secrets.GIT_COMMITTERS_TOKEN }}

  terraform-additional-checks:
    name: "Additional Terraform Checks"
    runs-on: ubuntu-latest
    needs: [terraform-validation-1-5, terraform-validation-1-6]
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: "1.6.0"
      
      - name: Terraform init
        run: terraform init -backend=false

      - name: Terraform plan (JSON)
        env:
          TF_VAR_github_token: ${{ secrets.GIT_COMMITTERS_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
        run: |
          # Use -no-color to avoid ANSI escape codes and -compact-warnings for cleaner logs with less sensitive data
          terraform plan -input=false -refresh=false -no-color -compact-warnings \
            -var="name=${{ github.workflow }}" -var="owners=[\"@${{ github.repository_owner }}\"]" -out=tfplan.binary
          # Convert to JSON for analysis but don't print sensitive values
          terraform show -json tfplan.binary > ci-tfplan.json
          # Remove the binary plan file immediately after use
          rm -f tfplan.binary

      - name: Install conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.51.0/conftest_0.51.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.51.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/

      - name: Run OPA guardrails (conftest)
        run: conftest test --policy policy/ ci-tfplan.json

      - name: Install OPA
        run: |
          wget https://github.com/open-policy-agent/opa/releases/download/v1.5.1/opa_linux_amd64 -O opa
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Lint OPA policies
        run: opa fmt -w policy/ && opa check policy/

      - name: Check for drift (no unexpected resource changes)
        env:
          TF_VAR_github_token: ${{ secrets.GIT_COMMITTERS_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_name: ${{ github.workflow }}
          TF_VAR_owners: '["@${{ github.repository_owner }}"]'
        run: |
          bash scripts/ci-check-drift.sh -var="name=${{ github.workflow }}" -var="owners=[\"@${{ github.repository_owner }}\"]"

  # Using reusable workflow for security scanning
  security-scan:
    name: "Security Scanning"
    uses: ./.github/workflows/reusable-security-scan.yml
    permissions:
      contents: read
      security-events: write
    with:
      working_directory: "."
      target_type: "fs"
      format: "sarif"
      severity: "MEDIUM,HIGH,CRITICAL"
      upload_to_security_tab: true

  # Using reusable workflow for documentation
  terraform-docs:
    name: "Generate Terraform Documentation"
    uses: ./.github/workflows/reusable-terraform-docs.yml
    permissions:
      contents: write
    with:
      working_directory: "."
      output_file: "README.md"
      git_push: true
    secrets:
      token: ${{ secrets.GIT_COMMITTERS_TOKEN }}
      
  markdown-lint:
    name: "Markdown Linting"
    runs-on: ubuntu-latest
    needs: terraform-docs
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '18'

      - name: Install markdownlint CLI
        run: npm install -g markdownlint-cli2

      - name: Lint Markdown files
        run: markdownlint-cli2 "**/*.md"

  test:
    name: Terratest
    runs-on: ubuntu-latest
    needs: [terraform-validation-1-5, terraform-validation-1-6, security-scan]
    
    # Job-specific permissions
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.21'

      - name: Install OpenTofu (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gpg
          curl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
          chmod +x install-opentofu.sh
          ./install-opentofu.sh --install-method deb
          rm install-opentofu.sh
          tofu version

      - name: Install Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
          unzip terraform_1.6.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform version

      - name: Run Terratest suite
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN }}
          GITHUB_OWNER: ${{ github.repository_owner }}
        run: |
          export GO111MODULE=on
          go mod tidy
          go test ./test -timeout 5m
        working-directory: ${{ github.workspace }}
        
  workflow-summary:
    name: "CI Workflow Summary"
    needs: [terraform-validation-1-5, terraform-validation-1-6, terraform-additional-checks, security-scan, terraform-docs, test, markdown-lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate CI Summary
        run: |
          echo "## CI Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | ------ |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Validation (1.5.0) | ${{ needs.terraform-validation-1-5.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Validation (1.6.0) | ${{ needs.terraform-validation-1-6.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Additional Terraform Checks | ${{ needs.terraform-additional-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Docs | ${{ needs.terraform-docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Lint | ${{ needs.markdown-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terratest | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY

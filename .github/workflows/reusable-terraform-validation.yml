name: Reusable Terraform Validation

# Description: This is a reusable workflow that provides standard Terraform validation.
# Other workflows can call this workflow to ensure consistent validation across the repository.
# Key actions: format check, init, validate, security scanning

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'The version of Terraform to use'
        type: string
        default: 'latest'
      working_directory:
        description: 'The directory containing Terraform code'
        type: string
        default: '.'
      backend:
        description: 'Whether to initialize the Terraform backend'
        type: boolean
        default: false
    secrets:
      token:
        description: 'GitHub token for API access'
        required: false

# No top-level permissions required for reusable workflows
# They inherit permissions from the caller workflow

jobs:
  validate:
    name: "Terraform Validation"
    runs-on: ubuntu-latest
    
    # Least-privilege permissions for the job
    permissions:
      contents: read
      security-events: write
    
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ inputs.terraform_version }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init -no-color ${{ inputs.backend == false && '-backend=false' || '' }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v6.1.0
        with:
          tflint_version: latest
      
      - name: Run TFLint
        working-directory: ${{ inputs.working_directory }}
        run: tflint --format compact
      
      - name: Format Check Result Summary
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "::warning::Terraform format check failed. Run 'terraform fmt -recursive' locally to fix formatting."
      
      - name: Validation Result Summary
        run: |
          echo "### Terraform Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Format Check: ${{ steps.fmt.outcome == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Terraform Init: ${{ steps.init.outcome == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Terraform Validate: ${{ steps.validate.outcome == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY

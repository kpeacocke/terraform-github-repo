name: "Traceability Check"

# Description: This workflow ensures PRs reference valid issues for requirements traceability.
# It runs on pull request events to validate that referenced issues exist and are open.
# Key actions: PR content validation, issue status checking

# Minimal permissions for security hardening
permissions:
  contents: read
  issues: read
  pull-requests: read

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  traceability:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      pull-requests: read
    steps:
      - name: "Check PR references and issue state"
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            // Skip traceability check for Dependabot PRs
            if (pr.user && pr.user.login === 'dependabot[bot]') {
              console.log('Dependabot PR detected, skipping traceability check.');
              return;
            }

            const body = pr.body || "";
            const issueRefRegex = /#(\d+)/g;
            const matches = [...body.matchAll(issueRefRegex)];

            if (matches.length === 0) {
              core.setFailed("PR must reference at least one issue using #<number>.");
              return;
            }

            const issueNumber = matches[0][1]; // just check the first one

            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });

              if (!issue.data.assignee) {
                core.setFailed(`Referenced issue #${issueNumber} has no assignee.`);
                return;
              }

              const acceptableStates = ["in progress", "active", "doing"];
              const labels = issue.data.labels.map(label => label.name.toLowerCase());
              const validState = labels.some(label => acceptableStates.includes(label));

              if (!validState) {
                core.setFailed(`Referenced issue #${issueNumber} must have one of these labels: ${acceptableStates.join(", ")}`);
              }
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`Referenced issue #${issueNumber} does not exist in this repository.`);
              } else {
                core.setFailed(`Error fetching issue #${issueNumber}: ${error.message}`);
              }
            }

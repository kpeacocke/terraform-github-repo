name: Deploy Documentation

# Description: This workflow builds and deploys documentation to GitHub Pages.
# It runs on main branch pushes, documentation-related PRs, releases, and manual triggers.
# - PR events: Updates docs in the PR branch
# - Main/release events: Deploys docs to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '*.tf'
      - 'examples/**'
      - 'README.md'
  pull_request:
    paths:
      - 'variables.tf'
      - 'outputs.tf'
      - 'README.md'
      - 'docs/**'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  update-terraform-docs:
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-terraform-docs.yml
    permissions:
      contents: write
    with:
      working_directory: "."
      output_file: "README.md"
      git_push: true
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  build-and-deploy-docs:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    # Set explicit permissions for the build-and-deploy-docs job
    permissions:
      contents: write  # For git push operations
      pages: write     # For GitHub Pages configuration
      id-token: write  # For deployment authentication
    steps:
      - name: Checkout Main Branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          fetch-depth: 0  # Needed for git-revision-date-localized plugin
          # Force checkout of main branch to ensure docs are always built from main, regardless of trigger
          ref: main
          # Use GIT_COMMITTERS_TOKEN for higher permissions, falling back to GITHUB_TOKEN if not available
          token: ${{ secrets.GIT_COMMITTERS_TOKEN || secrets.GITHUB_TOKEN }}
          # Ensure clean checkout
          clean: true
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install OpenSSL dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev openssl ca-certificates

      - name: Install MkDocs dependencies
        run: |
          # Upgrade pip first
          python -m pip install --upgrade pip setuptools wheel
          
          # Clear pip cache to ensure clean environment
          pip cache purge
          
          # Install with certificate verification configured during build
          export PYTHONHTTPSVERIFY=0
          export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
          export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
          
          # Install critical dependencies first with specific versions
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --no-cache-dir pyyaml==6.0.1 mergedeep==1.3.4 markupsafe==2.1.3 jinja2==3.1.2 packaging==23.2
          
          # Wait a moment to ensure dependencies are properly registered
          sleep 2
          
          # Install requirements from file with SSL handling
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --no-cache-dir -r docs/requirements.txt
          
          # Ensure core dependencies are installed, even if requirements.txt changes
          # Using mike 2.0.0 which doesn't support the --force flag
          pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org --no-cache-dir --no-deps mike==2.0.0
          
          # Show detailed dependency information for debugging
          echo "Key package versions:"
          pip list | grep -E "mergedeep|pyyaml|mkdocs|mike|jinja2|markupsafe"
          
          # List all installed packages for debugging
          echo "All installed packages:"
          pip list

      - name: Apply Python SSL fixes
        run: |
          source ./scripts/fix-python-ssl.sh

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: latest

      - name: Generate API Documentation
        run: |
          # Install terraform-docs
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          
          # Create API docs directory if it doesn't exist
          mkdir -p docs/api
          
          # Generate comprehensive API documentation
          echo "# Inputs" > docs/api/inputs.md
          echo "" >> docs/api/inputs.md
          echo "This page documents all available input variables for the module." >> docs/api/inputs.md
          echo "" >> docs/api/inputs.md
          ./terraform-docs markdown table --output-template '{{ .Inputs }}' . >> docs/api/inputs.md
          
          echo "# Outputs" > docs/api/outputs.md  
          echo "" >> docs/api/outputs.md
          echo "This page documents all outputs provided by the module." >> docs/api/outputs.md
          echo "" >> docs/api/outputs.md
          ./terraform-docs markdown table --output-template '{{ .Outputs }}' . >> docs/api/outputs.md
          
          echo "# Resources" > docs/api/resources.md
          echo "" >> docs/api/resources.md
          echo "This page documents all resources created by the module." >> docs/api/resources.md
          echo "" >> docs/api/resources.md
          ./terraform-docs markdown table --output-template '{{ .Resources }}' . >> docs/api/resources.md
          
          # Generate example documentation
          mkdir -p docs/examples
          for example in examples/*/; do
            if [ -d "$example" ]; then
              example_name=$(basename "$example")
              echo "# ${example_name^} Example" > "docs/examples/${example_name}.md"
              echo "" >> "docs/examples/${example_name}.md"
              if [ -f "${example}/README.md" ]; then
                cat "${example}/README.md" >> "docs/examples/${example_name}.md"
              else
                echo "Example configuration for ${example_name}." >> "docs/examples/${example_name}.md"
                echo "" >> "docs/examples/${example_name}.md"
                echo '```hcl' >> "docs/examples/${example_name}.md"
                cat "${example}/main.tf" >> "docs/examples/${example_name}.md" 2>/dev/null || echo "# Example configuration" >> "docs/examples/${example_name}.md"
                echo '```' >> "docs/examples/${example_name}.md"
              fi
            fi
          done

      # We've moved the git config into the build and deploy step

      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            VERSION="latest"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0
        with:
          enablement: true
          
      - name: Verify Pages Setup
        run: |
          if [[ -z "${{ steps.pages.outputs }}" ]]; then
            echo "::notice::GitHub Pages setup completed but didn't return output. This is normal for private repositories."
          else
            echo "GitHub Pages setup completed successfully."
          fi

      - name: Fix Mike Alias Conflicts (If Needed)
        run: |
          chmod +x ./scripts/fix-mike-aliases.sh
          # Run the conflict resolution script directly
          ./scripts/fix-mike-aliases.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN != '' && secrets.GIT_COMMITTERS_TOKEN || secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
          CI: "true"

      - name: Build and deploy with versioning
        run: |
          # Start by ensuring we're in the GitHub workspace
          cd $GITHUB_WORKSPACE
          echo "Starting in directory: $(pwd)"
          
          # Verify git repository status
          if [ ! -d ".git" ]; then
            echo "::error::Not in a git repository at the start of the workflow"
            exit 1
          fi
          # Set environment variables for Python SSL
          export PYTHONHTTPSVERIFY=0
          export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
          export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
          
          # First check if mkdocs.yml exists
          echo "Checking for mkdocs.yml file..."
          if [ ! -f "mkdocs.yml" ]; then
            echo "::error::mkdocs.yml file not found in the current directory!"
            pwd
            ls -la
            exit 1
          fi
          
          # Validate mkdocs configuration with error handling
          echo "Validating mkdocs configuration..."
          if ! mkdocs build --clean --strict; then
            echo "::warning::MkDocs build failed with strict mode, trying with verbose output"
            if ! mkdocs build --verbose; then
              echo "::error::MkDocs build failed! Checking Python environment..."
              python -c "import sys; print(sys.path)"
              python -c "import yaml, mergedeep; print('YAML version:', yaml.__version__, 'Mergedeep version:', mergedeep.__version__)"
              exit 1
            fi
          fi
          
          # Verify site directory was created and has content
          if [ ! -d "site" ] || [ -z "$(ls -A site 2>/dev/null)" ]; then
            echo "::error::Site directory is missing or empty after build!"
            exit 1
          else
            echo "Site directory created successfully with $(find site -type f | wc -l) files"
          fi
          
          # Ensure we're in a git repository
          echo "Checking if we're in a git repository..."
          if [ ! -d ".git" ]; then
            echo "::warning::Not in a git repository, moving back to GITHUB_WORKSPACE"
            cd $GITHUB_WORKSPACE
            if [ ! -d ".git" ]; then
              echo "::error::Still not in a git repository after moving to GITHUB_WORKSPACE"
              echo "Current directory: $(pwd)"
              ls -la
              exit 1
            fi
          fi
          
          # Configure Git for GitHub Pages deployment
          echo "Setting up Git configuration for branch management..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Commit any generated API documentation files to avoid conflicts
          git add docs/api/ docs/examples/ || true
          git diff-index --quiet HEAD || git commit -m "chore: update generated documentation [skip ci]" || true
          
          # Make sure our main branch is clean and up to date
          git fetch origin main
          git reset --hard origin/main
          
          # Check if gh-pages branch exists and create if needed
          if ! git ls-remote --exit-code --heads origin gh-pages; then
            echo "Creating gh-pages branch as it doesn't exist..."
            # Create the branch without checking it out
            git_current_sha=$(git rev-parse HEAD)
            git_current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "Current SHA: $git_current_sha, Current branch: $git_current_branch"
            
            # Create the gh-pages branch using a temporary directory
            tmp_dir=$(mktemp -d)
            pushd $tmp_dir
            git init
            git config --local user.name "github-actions[bot]"
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            echo "# GitHub Pages Branch" > README.md
            git add README.md
            git commit -m "Initial gh-pages branch"
            git remote add origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
            git push -f origin HEAD:gh-pages
            popd
            rm -rf $tmp_dir
            
            # Verify we're back in the main repository
            echo "Current directory after gh-pages creation: $(pwd)"
            if [ ! -d ".git" ]; then
              echo "::error::Not in a git repository after gh-pages creation"
              cd $GITHUB_WORKSPACE
              echo "Moved back to GITHUB_WORKSPACE: $(pwd)"
            fi
          # Fetch and merge/rebase latest gh-pages before deploying
          echo "Fetching and merging/rebasing latest gh-pages branch before deploying..."
          git fetch origin gh-pages || true
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages || git checkout -b gh-pages origin/gh-pages
            git pull origin gh-pages || true
            git checkout main
            git merge gh-pages || true
          else
            echo "No remote gh-pages branch to merge."
          fi

            
            echo "gh-pages branch created successfully"
          else
            echo "gh-pages branch already exists, skipping creation"
          fi
          
          # Clean up any previous mike state to avoid conflicts
          rm -rf .mike 2>/dev/null || true
          
          # Store current git status for debugging
            # Don't use multiple steps for mike - execute a single reliable command
            echo "Deploying version ${{ steps.version.outputs.version }} and updating aliases..."
            mike deploy --push --update-aliases ${{ steps.version.outputs.version }} --title "${{ steps.version.outputs.version }}"
            # Set as latest alias in a single operation
            echo "Setting version ${{ steps.version.outputs.version }} as 'latest' alias..."
            mike alias --push --update ${{ steps.version.outputs.version }} latest
          git fetch --all
          
          # Deploy based on event type with more reliable error handling
            # Single command to deploy latest 
            mike deploy --push --update-aliases latest --title "Latest (main)"
            echo "Deploying version ${{ steps.version.outputs.version }} and updating aliases..."
            mike deploy --push --update-aliases ${{ steps.version.outputs.version }} --title "${{ steps.version.outputs.version }}" || {
              echo "::error::Failed to deploy documentation with mike, retrying with verbose output"
              mike deploy --push --update-aliases ${{ steps.version.outputs.version }} --title "${{ steps.version.outputs.version }}" --verbose
            }
            
            # Set as latest alias in a single operation
            echo "Setting version ${{ steps.version.outputs.version }} as 'latest' alias..."
            mike alias --push --update ${{ steps.version.outputs.version }} latest
          else
            # For main branch, update latest documentation
            echo "Deploying latest documentation from main branch..."
            
            # Single command to deploy latest 
            mike deploy --push --update-aliases latest --title "Latest (main)" || {
              echo "::error::Failed to deploy latest documentation with mike, retrying with verbose output"
              mike deploy --push --update-aliases latest --title "Latest (main)" --verbose
            }
          fi
          
          # Set default version in a single command
          echo "Setting 'latest' as the default version..."
          mike set-default --push latest
          
          # Enhanced deployment verification
          echo "Deployment complete. Running enhanced verification..."
          
          # Show all git branches and remotes for debugging
          echo "Available Git branches and remotes:"
          git branch -a
          git remote -v
          
          # Store original state to restore at end
          ORIGINAL_SHA=$(git rev-parse HEAD)
          
          # Verify gh-pages remote branch exists
          if git ls-remote --exit-code --heads origin gh-pages; then
            echo "✅ gh-pages branch exists in remote"
            
            # Create a temporary directory for verification
            TEMP_DIR=$(mktemp -d)
            echo "🔍 Creating temporary directory for verification: $TEMP_DIR"
            
            # Clone only the gh-pages branch to check structure
            pushd $TEMP_DIR
            git clone --branch gh-pages --single-branch --depth 1 https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git gh-pages-check
            
            if [ -d "gh-pages-check" ]; then
              echo "✅ Successfully cloned gh-pages branch"
              pushd gh-pages-check
              
              # Check for mike configuration and version files
              if [ -f ".mike" ]; then
                echo "✅ .mike file exists with the following content:"
                cat .mike
              else
                echo "⚠️ .mike file does not exist in gh-pages branch!"
              fi
              
              if [ -d "latest" ]; then
                echo "✅ 'latest' version directory exists"
                find latest -type f | head -n 5
              else
                echo "⚠️ 'latest' version directory does not exist!"
                ls -la
              fi
              
              # Return to temp directory
              popd
            else

          # Ensure we have the latest gh-pages from origin before pushing
          echo "Fetching and rebasing latest gh-pages branch before deploying..."
          git fetch origin gh-pages
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages || git checkout -b gh-pages origin/gh-pages
            git pull origin gh-pages --rebase
            git checkout main
            # Optionally: merge gh-pages into main (if needed)
            # git merge gh-pages
          else
            echo "No remote gh-pages branch to rebase."
          fi
          
          # Restore original state
          git fetch
          git reset --hard $ORIGINAL_SHA
          echo "✅ Verification complete, git state restored"
        env:
          # Increase Python's error verbosity
          PYTHONVERBOSE: 1
          # GitHub token for git operations and plugins - use GIT_COMMITTERS_TOKEN for higher permissions
          GITHUB_TOKEN: ${{ secrets.GIT_COMMITTERS_TOKEN || secrets.GITHUB_TOKEN }}
          # GitHub token for git-committers plugin (MKDOCS_GIT_COMMITTERS_APIKEY is what the plugin looks for)
          MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GIT_COMMITTERS_TOKEN }}
          # Additional git configuration for mike
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b # v3
        with:
          path: site

  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build-and-deploy-docs
    # Set required permissions for GitHub Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment source
    # Deploy to the GitHub Pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5